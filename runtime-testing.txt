Burrows-Wheeler

/* *****************************************************************************
 *  Which sorting algorithm did you use in CircularSuffixArray.java?
 *  Why did you choose it?
 **************************************************************************** */
We used Arrays.sort, which uses Timsort (natural mergesort) for reference types.
We chose this because it was the cleanest solution to compare the suffixes
and sort the array.

/* *****************************************************************************
 *  How long does your implementation of the Burrows-Wheeler data compression
 *  algorithm (BurrowsWheeler + MoveToFront + Huffman) take to compress and
 *  expand mobydick.txt? What is the compression ratio (number of bytes in
 *  compressed message divided by the number of bytes in the message)?
 *  Compare the results to that for running Huffman alone and GNU
 *  command-line utility Gzip.
 **************************************************************************** */

(real time)

Algorithm       Compression time    Expansion time           Compression ratio
------------------------------------------------------------------------------
My program          6.131s           0.929s           0.347 (413962 / 1191463)
Huffman alone       0.752s           0.553s           0.560 (667651 / 1191463)
gzip                0.280s           0.403s           0.408 (485561 / 1191463)

See the Checklist for Bash commands to compress/expand.



/* *****************************************************************************
 *  What is the running time of each of the following methods as a function
 *  of the input size n and the alphabet size R, both in practice
 *  (on typical English text inputs) and in theory (in the worst case)?
 *  Use big Theta notation to simplify your answer (e.g., n, n + R, n log n,
 *  n log^2n n, n^2, or R n).
 *
 *  Include the time for sorting circular suffixes in Burrows-Wheeler
 *  transform().
 **************************************************************************** */

                                      typical            worst
---------------------------------------------------------------------
CircularSuffixArray constructor       nlog_2(n)          nlog_2(n)
BurrowsWheeler transform()            nlog_2(n)          nlog_2(n)
BurrowsWheeler inverseTransform()     n + R              n + R
MoveToFront encode()                  n + R              nR
MoveToFront decode()                  n + R              nR
Huffman compress()                    n + R log R        n + R log R
Huffman expand()                      n                  n



